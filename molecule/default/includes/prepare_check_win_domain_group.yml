---

# Check win_domain_group works properly

- name: "Add OU: {{ win_domain_groups_tests_ad_ou }}"
  win_shell: |-
    # Parameters
    $ou = "{{ win_domain_groups_tests_ad_ou }}"
    $ou_name = "{{ win_domain_groups_tests_ad_ou_name }}"
    $ou_base = "{{ win_domain_groups_tests_ad_ou_base }}"

    Try {
      $ou_obj = Get-ADOrganizationalUnit -Identity $ou
    } Catch { $ou_obj = $null }

    If ($ou_obj) {
      Write-Host ("OU already exists")
    } Else {
      Try {
        New-ADOrganizationalUnit `
          -Name "$ou_name" `
          -Path "$ou_base" `
          -ProtectedFromAccidentalDeletion $False
        $ou_obj = Get-ADOrganizationalUnit -Identity $ou
      } Catch { $ou_obj = $null }
      If ($ou_obj) {
        Write-Host ("Created OU")
      } Else {
        Write-Host ("Error creating OU")
      }
    }
  register: add_ou_result
  changed_when: "'Created OU' in add_ou_result.stdout"
  failed_when: "'Error creating OU' in add_ou_result.stdout"

- name: Add test group
  win_domain_group:
    name: "{{ win_domain_groups_tests_ad_group }}"
    path: "{{ win_domain_groups_tests_ad_ou_base }}"
    scope: global
    category: security
    protect: no
    state: present

- name: Check group exists
  include: ps1_check_group.yml
  vars:
    group: "{{ win_domain_groups_tests_ad_group }}"
    state_to_fail: absent

- name: Remove test group
  win_domain_group:
    name: "{{ win_domain_groups_tests_ad_group }}"
    state: absent

- name: Check group is absent
  include: ps1_check_group.yml
  vars:
    group: "{{ win_domain_groups_tests_ad_group }}"
    state_to_fail: present
